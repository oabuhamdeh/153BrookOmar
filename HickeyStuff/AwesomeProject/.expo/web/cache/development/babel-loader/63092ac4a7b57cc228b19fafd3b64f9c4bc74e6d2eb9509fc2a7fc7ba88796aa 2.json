{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DigitView from \"./DigitView\";\nimport AddAlarm from \"./AddAlarm\";\nimport AlarmTest from \"./AlarmTest\";\nS;\nimport PushNotificationIOS from '@react-native-community/push-notification-ios';\nimport { useEffect, useRef } from 'react';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nNotifications.setNotificationHandler({\n  handleNotification: function () {\n    var _handleNotification = _asyncToGenerator(function* () {\n      return {\n        shouldShowAlert: true,\n        shouldPlaySound: false,\n        shouldSetBadge: false\n      };\n    });\n    function handleNotification() {\n      return _handleNotification.apply(this, arguments);\n    }\n    return handleNotification;\n  }()\n});\nexport default function App() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    expoPushToken = _useState2[0],\n    setExpoPushToken = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notification = _useState4[0],\n    setNotification = _useState4[1];\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'space-around'\n    },\n    children: [_jsxs(Text, {\n      children: [\"Your expo push token: \", expoPushToken]\n    }), _jsxs(View, {\n      style: {\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: [_jsxs(Text, {\n        children: [\"Title: \", notification && notification.request.content.title, \" \"]\n      }), _jsxs(Text, {\n        children: [\"Body: \", notification && notification.request.content.body]\n      }), _jsxs(Text, {\n        children: [\"Data: \", notification && JSON.stringify(notification.request.content.data)]\n      })]\n    }), _jsx(Button, {\n      title: \"Press to schedule a notification\",\n      onPress: _asyncToGenerator(function* () {\n        yield schedulePushNotification();\n      })\n    })]\n  });\n}\nfunction schedulePushNotification() {\n  return _schedulePushNotification.apply(this, arguments);\n}\nfunction _schedulePushNotification() {\n  _schedulePushNotification = _asyncToGenerator(function* () {\n    yield Notifications.scheduleNotificationAsync({\n      content: {\n        title: \"You've got mail! ðŸ“¬\",\n        body: 'Here is the notification body',\n        data: {\n          data: 'goes here'\n        }\n      },\n      trigger: {\n        seconds: 2\n      }\n    });\n  });\n  return _schedulePushNotification.apply(this, arguments);\n}\nfunction registerForPushNotificationsAsync() {\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nfunction _registerForPushNotificationsAsync() {\n  _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n    var token;\n    if (Platform.OS === 'android') {\n      yield Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C'\n      });\n    }\n    if (Device.isDevice) {\n      var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n        existingStatus = _yield$Notifications$.status;\n      var finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n          status = _yield$Notifications$2.status;\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = (yield Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n    return token;\n  });\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nvar Testing = function Testing() {\n  return _jsxs(View, {\n    style: {\n      flexDirection: 'column'\n    },\n    children: [_jsx(Text, {\n      style: styles.titleText,\n      children: \"Time to Test!\"\n    }), _jsx(AlarmTest, {\n      num: \"3\",\n      color: \"#f2fada\"\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  titleText: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    padding: 10\n  },\n  paragraphText: {\n    fontSize: 20,\n    fontWeight: 'normal',\n    textAlign: 'left'\n  },\n  nameText: {\n    fontSize: 40,\n    fontWeight: 'bold',\n    textAlign: 'left',\n    color: '#008080'\n  }\n});","map":{"version":3,"names":["React","View","Button","Text","StyleSheet","FlatList","Platform","DigitView","AddAlarm","AlarmTest","S","PushNotificationIOS","useEffect","useRef","Device","Notifications","jsxs","_jsxs","jsx","_jsx","setNotificationHandler","handleNotification","_handleNotification","_asyncToGenerator","shouldShowAlert","shouldPlaySound","shouldSetBadge","apply","arguments","App","_useState","useState","_useState2","_slicedToArray","expoPushToken","setExpoPushToken","_useState3","_useState4","notification","setNotification","notificationListener","responseListener","registerForPushNotificationsAsync","then","token","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription","style","flex","alignItems","justifyContent","children","request","content","title","body","JSON","stringify","data","onPress","schedulePushNotification","_schedulePushNotification","scheduleNotificationAsync","trigger","seconds","_registerForPushNotificationsAsync","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","isDevice","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","alert","getExpoPushTokenAsync","Testing","flexDirection","styles","titleText","num","color","create","fontSize","fontWeight","textAlign","padding","paragraphText","nameText"],"sources":["C:/Users/User/Desktop/Dyroth/School/Senior year/Mobile/153BrookOmar/HickeyStuff/AwesomeProject/components/Testing.js"],"sourcesContent":["import React from 'react';\r\nimport {View, Button, Text, StyleSheet, FlatList, Platform} from 'react-native';\r\n//import AddAlarm from \"./AddAlarm\";\r\nimport DigitView from \"./DigitView\";\r\nimport AddAlarm from \"./AddAlarm\";\r\nimport AlarmTest from \"./AlarmTest\";S\r\nimport PushNotificationIOS from '@react-native-community/push-notification-ios';\r\nimport {useEffect, useRef } from 'react';\r\nimport * as Device from 'expo-device';\r\nimport * as Notifications from 'expo-notifications';\r\n\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: false,\r\n    shouldSetBadge: false,\r\n  }),\r\n});\r\n\r\nexport default function App() {\r\n  const [expoPushToken, setExpoPushToken] = useState('');\r\n  const [notification, setNotification] = useState(false);\r\n  const notificationListener = useRef();\r\n  const responseListener = useRef();\r\n\r\n  useEffect(() => {\r\n    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n\r\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n      setNotification(notification);\r\n    });\r\n\r\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n      console.log(response);\r\n    });\r\n\r\n    return () => {\r\n      Notifications.removeNotificationSubscription(notificationListener.current);\r\n      Notifications.removeNotificationSubscription(responseListener.current);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'space-around',\r\n      }}>\r\n      <Text>Your expo push token: {expoPushToken}</Text>\r\n      <View style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n        <Text>Title: {notification && notification.request.content.title} </Text>\r\n        <Text>Body: {notification && notification.request.content.body}</Text>\r\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\r\n      </View>\r\n      <Button\r\n        title=\"Press to schedule a notification\"\r\n        onPress={async () => {\r\n          await schedulePushNotification();\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nasync function schedulePushNotification() {\r\n  await Notifications.scheduleNotificationAsync({\r\n    content: {\r\n      title: \"You've got mail! ðŸ“¬\",\r\n      body: 'Here is the notification body',\r\n      data: { data: 'goes here' },\r\n    },\r\n    trigger: { seconds: 2 },\r\n  });\r\n}\r\n\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n\r\n  if (Platform.OS === 'android') {\r\n    await Notifications.setNotificationChannelAsync('default', {\r\n      name: 'default',\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: '#FF231F7C',\r\n    });\r\n  }\r\n\r\n  if (Device.isDevice) {\r\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nconst Testing = () => {\r\n    return (\r\n        <View style={{flexDirection: 'column'}}>\r\n            <Text style={styles.titleText}>Time to Test!</Text>\r\n                <AlarmTest num=\"3\" color=\"#f2fada\"/>\r\n            \r\n\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    titleText: {\r\n      fontSize: 30,\r\n      fontWeight: 'bold',\r\n      textAlign: 'center',\r\n      padding: 10,\r\n    },\r\n    paragraphText: {\r\n        fontSize: 20,\r\n        fontWeight: 'normal',\r\n        textAlign: 'left',\r\n    },\r\n      nameText: {\r\n        fontSize: 40,\r\n        fontWeight: 'bold',\r\n        textAlign: 'left',\r\n        color: '#008080',\r\n    },\r\n  });"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}