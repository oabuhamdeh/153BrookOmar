{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport invariant from 'invariant';\nvar RNCPushNotificationIOS = NativeModules.RNCPushNotificationIOS;\nvar PushNotificationEmitter = new NativeEventEmitter(RNCPushNotificationIOS);\nvar _notifHandlers = new Map();\nvar DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nvar NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nvar NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nvar DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\nvar PushNotificationIOS = function () {\n  function PushNotificationIOS(nativeNotif) {\n    var _this = this;\n    _classCallCheck(this, PushNotificationIOS);\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n    this._actionIdentifier = nativeNotif.actionIdentifier;\n    this._userText = nativeNotif.userText;\n    if (nativeNotif.remote) {\n      Object.keys(nativeNotif).forEach(function (notifKey) {\n        var notifVal = nativeNotif[notifKey];\n        if (notifKey === 'aps') {\n          _this._alert = notifVal.alert;\n          _this._title = notifVal == null ? void 0 : notifVal.alertTitle;\n          _this._subtitle = notifVal == null ? void 0 : notifVal.subtitle;\n          _this._sound = notifVal.sound;\n          _this._badgeCount = notifVal.badge;\n          _this._category = notifVal.category;\n          _this._contentAvailable = notifVal['content-available'];\n          _this._threadID = notifVal['thread-id'];\n          _this._fireDate = notifVal.fireDate;\n        } else {\n          _this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      this._badgeCount = nativeNotif.badge || nativeNotif.applicationIconBadgeNumber;\n      this._sound = nativeNotif.sound || nativeNotif.soundName;\n      this._alert = nativeNotif.body;\n      this._title = nativeNotif == null ? void 0 : nativeNotif.title;\n      this._subtitle = nativeNotif == null ? void 0 : nativeNotif.subtitle;\n      this._threadID = nativeNotif['thread-id'];\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n      this._fireDate = nativeNotif.fireDate;\n    }\n  }\n  _createClass(PushNotificationIOS, [{\n    key: \"finish\",\n    value: function finish(fetchResult) {\n      if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {\n        return;\n      }\n      this._remoteNotificationCompleteCallbackCalled = true;\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.onFinishRemoteNotification(this._notificationId, fetchResult);\n    }\n  }, {\n    key: \"getMessage\",\n    value: function getMessage() {\n      if (typeof this._alert === 'object') {\n        var _this$_alert;\n        return (_this$_alert = this._alert) == null ? void 0 : _this$_alert.body;\n      }\n      return this._alert;\n    }\n  }, {\n    key: \"getSound\",\n    value: function getSound() {\n      return this._sound;\n    }\n  }, {\n    key: \"getCategory\",\n    value: function getCategory() {\n      return this._category;\n    }\n  }, {\n    key: \"getAlert\",\n    value: function getAlert() {\n      return this._alert;\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      if (typeof this._alert === 'object') {\n        var _this$_alert2;\n        return (_this$_alert2 = this._alert) == null ? void 0 : _this$_alert2.title;\n      }\n      return this._title;\n    }\n  }, {\n    key: \"getSubtitle\",\n    value: function getSubtitle() {\n      if (typeof this._alert === 'object') {\n        var _this$_alert3;\n        return (_this$_alert3 = this._alert) == null ? void 0 : _this$_alert3.subtitle;\n      }\n      return this._subtitle;\n    }\n  }, {\n    key: \"getContentAvailable\",\n    value: function getContentAvailable() {\n      return this._contentAvailable;\n    }\n  }, {\n    key: \"getBadgeCount\",\n    value: function getBadgeCount() {\n      return this._badgeCount;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this._data;\n    }\n  }, {\n    key: \"getThreadID\",\n    value: function getThreadID() {\n      return this._threadID;\n    }\n  }, {\n    key: \"getActionIdentifier\",\n    value: function getActionIdentifier() {\n      return this._actionIdentifier;\n    }\n  }, {\n    key: \"getUserText\",\n    value: function getUserText() {\n      return this._userText;\n    }\n  }], [{\n    key: \"presentLocalNotification\",\n    value: function presentLocalNotification(details) {\n      RNCPushNotificationIOS.presentLocalNotification(details);\n    }\n  }, {\n    key: \"scheduleLocalNotification\",\n    value: function scheduleLocalNotification(details) {\n      RNCPushNotificationIOS.scheduleLocalNotification(details);\n    }\n  }, {\n    key: \"addNotificationRequest\",\n    value: function addNotificationRequest(request) {\n      var handledRequest = request.fireDate instanceof Date ? _objectSpread(_objectSpread({}, request), {}, {\n        fireDate: request.fireDate.toISOString()\n      }) : request;\n      var finalRequest = _objectSpread(_objectSpread({}, handledRequest), {}, {\n        repeatsComponent: request.repeatsComponent || {}\n      });\n      RNCPushNotificationIOS.addNotificationRequest(finalRequest);\n    }\n  }, {\n    key: \"setNotificationCategories\",\n    value: function setNotificationCategories(categories) {\n      RNCPushNotificationIOS.setNotificationCategories(categories);\n    }\n  }, {\n    key: \"cancelAllLocalNotifications\",\n    value: function cancelAllLocalNotifications() {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.cancelAllLocalNotifications();\n    }\n  }, {\n    key: \"removeAllPendingNotificationRequests\",\n    value: function removeAllPendingNotificationRequests() {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.removeAllPendingNotificationRequests();\n    }\n  }, {\n    key: \"removePendingNotificationRequests\",\n    value: function removePendingNotificationRequests(identifiers) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.removePendingNotificationRequests(identifiers);\n    }\n  }, {\n    key: \"removeAllDeliveredNotifications\",\n    value: function removeAllDeliveredNotifications() {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.removeAllDeliveredNotifications();\n    }\n  }, {\n    key: \"getDeliveredNotifications\",\n    value: function getDeliveredNotifications(callback) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.getDeliveredNotifications(callback);\n    }\n  }, {\n    key: \"removeDeliveredNotifications\",\n    value: function removeDeliveredNotifications(identifiers) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.removeDeliveredNotifications(identifiers);\n    }\n  }, {\n    key: \"setApplicationIconBadgeNumber\",\n    value: function setApplicationIconBadgeNumber(number) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.setApplicationIconBadgeNumber(number);\n    }\n  }, {\n    key: \"getApplicationIconBadgeNumber\",\n    value: function getApplicationIconBadgeNumber(callback) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.getApplicationIconBadgeNumber(callback);\n    }\n  }, {\n    key: \"cancelLocalNotifications\",\n    value: function cancelLocalNotifications(userInfo) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.cancelLocalNotifications(userInfo);\n    }\n  }, {\n    key: \"getScheduledLocalNotifications\",\n    value: function getScheduledLocalNotifications(callback) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.getScheduledLocalNotifications(callback);\n    }\n  }, {\n    key: \"getPendingNotificationRequests\",\n    value: function getPendingNotificationRequests(callback) {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.getPendingNotificationRequests(callback);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');\n      var listener;\n      if (type === 'notification') {\n        listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {\n          handler(new PushNotificationIOS(notifData));\n        });\n      } else if (type === 'localNotification') {\n        listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {\n          handler(new PushNotificationIOS(notifData));\n        });\n      } else if (type === 'register') {\n        listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {\n          handler(registrationInfo.deviceToken);\n        });\n      } else if (type === 'registrationError') {\n        listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {\n          handler(errorInfo);\n        });\n      }\n      _notifHandlers.set(type, listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type) {\n      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');\n      var listener = _notifHandlers.get(type);\n      if (!listener) {\n        return;\n      }\n      listener.remove();\n      _notifHandlers.delete(type);\n    }\n  }, {\n    key: \"requestPermissions\",\n    value: function requestPermissions(permissions) {\n      var requestedPermissions = {\n        alert: true,\n        badge: true,\n        sound: true\n      };\n      if (permissions) {\n        requestedPermissions = {\n          alert: !!permissions.alert,\n          badge: !!permissions.badge,\n          sound: !!permissions.sound,\n          critical: !!permissions.critical\n        };\n      }\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      return RNCPushNotificationIOS.requestPermissions(requestedPermissions);\n    }\n  }, {\n    key: \"abandonPermissions\",\n    value: function abandonPermissions() {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.abandonPermissions();\n    }\n  }, {\n    key: \"checkPermissions\",\n    value: function checkPermissions(callback) {\n      invariant(typeof callback === 'function', 'Must provide a valid callback');\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      RNCPushNotificationIOS.checkPermissions(callback);\n    }\n  }, {\n    key: \"getInitialNotification\",\n    value: function getInitialNotification() {\n      invariant(RNCPushNotificationIOS, 'PushNotificationManager is not available.');\n      return RNCPushNotificationIOS.getInitialNotification().then(function (notification) {\n        return notification && new PushNotificationIOS(notification);\n      });\n    }\n  }]);\n  return PushNotificationIOS;\n}();\nPushNotificationIOS.FetchResult = {\n  NewData: 'UIBackgroundFetchResultNewData',\n  NoData: 'UIBackgroundFetchResultNoData',\n  ResultFailed: 'UIBackgroundFetchResultFailed'\n};\nPushNotificationIOS.AuthorizationStatus = {\n  UNAuthorizationStatusNotDetermined: 0,\n  UNAuthorizationStatusDenied: 1,\n  UNAuthorizationStatusAuthorized: 2,\n  UNAuthorizationStatusProvisional: 3\n};\nexport default PushNotificationIOS;","map":{"version":3,"names":["_defineProperty","_classCallCheck","_createClass","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","NativeEventEmitter","NativeModules","invariant","RNCPushNotificationIOS","PushNotificationEmitter","_notifHandlers","Map","DEVICE_NOTIF_EVENT","NOTIF_REGISTER_EVENT","NOTIF_REGISTRATION_ERROR_EVENT","DEVICE_LOCAL_NOTIF_EVENT","PushNotificationIOS","nativeNotif","_this","_data","_remoteNotificationCompleteCallbackCalled","_isRemote","remote","_notificationId","notificationId","_actionIdentifier","actionIdentifier","_userText","userText","notifKey","notifVal","_alert","alert","_title","alertTitle","_subtitle","subtitle","_sound","sound","_badgeCount","badge","_category","category","_contentAvailable","_threadID","_fireDate","fireDate","applicationIconBadgeNumber","soundName","body","title","userInfo","value","finish","fetchResult","onFinishRemoteNotification","getMessage","_this$_alert","getSound","getCategory","getAlert","getTitle","_this$_alert2","getSubtitle","_this$_alert3","getContentAvailable","getBadgeCount","getData","getThreadID","getActionIdentifier","getUserText","presentLocalNotification","details","scheduleLocalNotification","addNotificationRequest","request","handledRequest","Date","toISOString","finalRequest","repeatsComponent","setNotificationCategories","categories","cancelAllLocalNotifications","removeAllPendingNotificationRequests","removePendingNotificationRequests","identifiers","removeAllDeliveredNotifications","getDeliveredNotifications","callback","removeDeliveredNotifications","setApplicationIconBadgeNumber","number","getApplicationIconBadgeNumber","cancelLocalNotifications","getScheduledLocalNotifications","getPendingNotificationRequests","addEventListener","type","handler","listener","addListener","notifData","registrationInfo","deviceToken","errorInfo","set","removeEventListener","get","remove","delete","requestPermissions","permissions","requestedPermissions","critical","abandonPermissions","checkPermissions","getInitialNotification","then","notification","FetchResult","NewData","NoData","ResultFailed","AuthorizationStatus","UNAuthorizationStatusNotDetermined","UNAuthorizationStatusDenied","UNAuthorizationStatusAuthorized","UNAuthorizationStatusProvisional"],"sources":["C:/Users/User/Desktop/Dyroth/School/Senior year/Mobile/153BrookOmar/HickeyStuff/AwesomeProject/node_modules/@react-native-community/push-notification-ios/js/index.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport {NativeEventEmitter, NativeModules} from 'react-native';\nimport invariant from 'invariant';\nimport type {\n  NotificationAlert,\n  NotificationRequest,\n  NotificationCategory,\n  NotificationAction,\n} from './types';\nconst {RNCPushNotificationIOS} = NativeModules;\n\nconst PushNotificationEmitter = new NativeEventEmitter(RNCPushNotificationIOS);\n\nconst _notifHandlers = new Map();\n\nconst DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nconst NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nconst NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nconst DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\n\nexport type {\n  NotificationAlert,\n  NotificationRequest,\n  NotificationCategory,\n  NotificationAction,\n};\n\nexport type ContentAvailable = 1 | null | void;\n\nexport type FetchResult = {\n  NewData: string,\n  NoData: string,\n  ResultFailed: string,\n};\n\nexport type AuthorizationStatus = {\n  UNAuthorizationStatusNotDetermined: 0,\n  UNAuthorizationStatusDenied: 1,\n  UNAuthorizationStatusAuthorized: 2,\n  UNAuthorizationStatusProvisional: 3,\n};\n\n/**\n * An event emitted by PushNotificationIOS.\n */\nexport type PushNotificationEventName = $Keys<{\n  /**\n   * Fired when a remote notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  notification: string,\n  /**\n   * Fired when a local notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  localNotification: string,\n  /**\n   * Fired when the user registers for remote notifications. The handler will be\n   * invoked with a hex string representing the deviceToken.\n   */\n  register: string,\n  /**\n   * Fired when the user fails to register for remote notifications. Typically\n   * occurs when APNS is having issues, or the device is a simulator. The\n   * handler will be invoked with {message: string, code: number, details: any}.\n   */\n  registrationError: string,\n}>;\n\n/**\n *\n * Handle push notifications for your app, including permission handling and\n * icon badge number.\n *\n * See https://reactnative.dev/docs/pushnotificationios.html\n */\nclass PushNotificationIOS {\n  _data: Object;\n  _alert: string | NotificationAlert;\n  _title: string;\n  _subtitle: string;\n  _sound: string;\n  _category: string;\n  _contentAvailable: ContentAvailable;\n  _badgeCount: number;\n  _notificationId: string;\n  /**\n   * The id of action the user has taken taken.\n   */\n  _actionIdentifier: ?string;\n  /**\n   * The text user has input if user responded with a text action.\n   */\n  _userText: ?string;\n  _isRemote: boolean;\n  _remoteNotificationCompleteCallbackCalled: boolean;\n  _threadID: string;\n  _fireDate: string | Date;\n\n  static FetchResult: FetchResult = {\n    NewData: 'UIBackgroundFetchResultNewData',\n    NoData: 'UIBackgroundFetchResultNoData',\n    ResultFailed: 'UIBackgroundFetchResultFailed',\n  };\n\n  static AuthorizationStatus: AuthorizationStatus = {\n    UNAuthorizationStatusNotDetermined: 0,\n    UNAuthorizationStatusDenied: 1,\n    UNAuthorizationStatusAuthorized: 2,\n    UNAuthorizationStatusProvisional: 3,\n  };\n\n  /**\n   * Schedules the localNotification for immediate presentation.\n   * @deprecated use `addNotificationRequest` instead\n   */\n  static presentLocalNotification(details: Object) {\n    RNCPushNotificationIOS.presentLocalNotification(details);\n  }\n\n  /**\n   * Schedules the localNotification for future presentation.\n   * @deprecated use `addNotificationRequest` instead\n   */\n  static scheduleLocalNotification(details: Object) {\n    RNCPushNotificationIOS.scheduleLocalNotification(details);\n  }\n\n  /**\n   * Sends notificationRequest to notification center at specified firedate.\n   * Fires immediately if firedate is not set.\n   */\n  static addNotificationRequest(request: NotificationRequest) {\n    const handledRequest =\n      request.fireDate instanceof Date\n        ? {...request, fireDate: request.fireDate.toISOString()}\n        : request;\n    const finalRequest = {\n      ...handledRequest,\n      repeatsComponent: request.repeatsComponent || {},\n    };\n\n    RNCPushNotificationIOS.addNotificationRequest(finalRequest);\n  }\n\n  /**\n   * Sets notification category to notification center.\n   * Used to set specific actions for notifications that contains specified category\n   */\n  static setNotificationCategories(categories: NotificationCategory[]) {\n    RNCPushNotificationIOS.setNotificationCategories(categories);\n  }\n\n  /**\n   * Cancels all scheduled localNotifications.\n   * @deprecated use `removeAllPendingNotificationRequests` instead\n   * - This method is deprecated in iOS 10 and will be removed from future release\n   */\n  static cancelAllLocalNotifications() {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.cancelAllLocalNotifications();\n  }\n\n  /**\n   * Removes all pending notifications\n   */\n  static removeAllPendingNotificationRequests() {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.removeAllPendingNotificationRequests();\n  }\n\n  /**\n   * Removes pending notifications with given identifier strings.\n   */\n  static removePendingNotificationRequests(identifiers: string[]) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.removePendingNotificationRequests(identifiers);\n  }\n\n  /**\n   * Remove all delivered notifications from Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#removealldeliverednotifications\n   */\n  static removeAllDeliveredNotifications(): void {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.removeAllDeliveredNotifications();\n  }\n\n  /**\n   * Provides you with a list of the app’s notifications that are still displayed in Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getdeliverednotifications\n   */\n  static getDeliveredNotifications(\n    callback: (notifications: Array<Object>) => void,\n  ): void {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.getDeliveredNotifications(callback);\n  }\n\n  /**\n   * Removes the specified notifications from Notification Center\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#removedeliverednotifications\n   */\n  static removeDeliveredNotifications(identifiers: Array<string>): void {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.removeDeliveredNotifications(identifiers);\n  }\n\n  /**\n   * Sets the badge number for the app icon on the home screen.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#setapplicationiconbadgenumber\n   */\n  static setApplicationIconBadgeNumber(number: number) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.setApplicationIconBadgeNumber(number);\n  }\n\n  /**\n   * Gets the current badge number for the app icon on the home screen.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getapplicationiconbadgenumber\n   */\n  static getApplicationIconBadgeNumber(callback: Function) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.getApplicationIconBadgeNumber(callback);\n  }\n\n  /**\n   * Cancel local notifications.\n   * @deprecated - use `removePendingNotifications`\n   * See https://reactnative.dev/docs/pushnotificationios.html#cancellocalnotification\n   */\n  static cancelLocalNotifications(userInfo: Object) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.cancelLocalNotifications(userInfo);\n  }\n\n  /**\n   * Gets the local notifications that are currently scheduled.\n   * @deprecated - use `getPendingNotificationRequests`\n   */\n  static getScheduledLocalNotifications(callback: Function) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.getScheduledLocalNotifications(callback);\n  }\n\n  /**\n   * Gets the pending local notification requests.\n   */\n  static getPendingNotificationRequests(\n    callback: (requests: NotificationRequest[]) => void,\n  ) {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.getPendingNotificationRequests(callback);\n  }\n\n  /**\n   * Attaches a listener to remote or local notification events while the app\n   * is running in the foreground or the background.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#addeventlistener\n   */\n  static addEventListener(type: PushNotificationEventName, handler: Function) {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    let listener;\n    if (type === 'notification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_NOTIF_EVENT,\n        (notifData) => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'localNotification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_LOCAL_NOTIF_EVENT,\n        (notifData) => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'register') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTER_EVENT,\n        (registrationInfo) => {\n          handler(registrationInfo.deviceToken);\n        },\n      );\n    } else if (type === 'registrationError') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTRATION_ERROR_EVENT,\n        (errorInfo) => {\n          handler(errorInfo);\n        },\n      );\n    }\n    _notifHandlers.set(type, listener);\n  }\n\n  /**\n   * Removes the event listener. Do this in `componentWillUnmount` to prevent\n   * memory leaks.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#removeeventlistener\n   */\n  static removeEventListener(type: PushNotificationEventName) {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    const listener = _notifHandlers.get(type);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _notifHandlers.delete(type);\n  }\n\n  /**\n   * Requests notification permissions from iOS, prompting the user's\n   * dialog box. By default, it will request all notification permissions, but\n   * a subset of these can be requested by passing a map of requested\n   * permissions.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#requestpermissions\n   */\n  static requestPermissions(permissions?: {\n    alert?: boolean,\n    badge?: boolean,\n    sound?: boolean,\n    critical?: boolean,\n  }): Promise<{\n    alert: boolean,\n    badge: boolean,\n    sound: boolean,\n    critical: boolean,\n  }> {\n    let requestedPermissions = {\n      alert: true,\n      badge: true,\n      sound: true,\n    };\n    if (permissions) {\n      requestedPermissions = {\n        alert: !!permissions.alert,\n        badge: !!permissions.badge,\n        sound: !!permissions.sound,\n        critical: !!permissions.critical,\n      };\n    }\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    return RNCPushNotificationIOS.requestPermissions(requestedPermissions);\n  }\n\n  /**\n   * Unregister for all remote notifications received via Apple Push Notification service.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#abandonpermissions\n   */\n  static abandonPermissions() {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.abandonPermissions();\n  }\n\n  /**\n   * See what push permissions are currently enabled. `callback` will be\n   * invoked with a `permissions` object.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#checkpermissions\n   */\n  static checkPermissions(callback: Function) {\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.checkPermissions(callback);\n  }\n\n  /**\n   * This method returns a promise that resolves to either the notification\n   * object if the app was launched by a push notification, or `null` otherwise.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getinitialnotification\n   */\n  static getInitialNotification(): Promise<?PushNotificationIOS> {\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    return RNCPushNotificationIOS.getInitialNotification().then(\n      (notification) => {\n        return notification && new PushNotificationIOS(notification);\n      },\n    );\n  }\n\n  /**\n   * You will never need to instantiate `PushNotificationIOS` yourself.\n   * Listening to the `notification` event and invoking\n   * `getInitialNotification` is sufficient\n   *\n   */\n  constructor(nativeNotif: Object) {\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n\n    this._actionIdentifier = nativeNotif.actionIdentifier;\n    this._userText = nativeNotif.userText;\n    if (nativeNotif.remote) {\n      // Extract data from Apple's `aps` dict as defined:\n      // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html\n      Object.keys(nativeNotif).forEach((notifKey) => {\n        const notifVal = nativeNotif[notifKey];\n\n        if (notifKey === 'aps') {\n          this._alert = notifVal.alert;\n          this._title = notifVal?.alertTitle;\n          this._subtitle = notifVal?.subtitle;\n          this._sound = notifVal.sound;\n          this._badgeCount = notifVal.badge;\n          this._category = notifVal.category;\n          this._contentAvailable = notifVal['content-available'];\n          this._threadID = notifVal['thread-id'];\n          this._fireDate = notifVal.fireDate;\n        } else {\n          this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      // Local notifications aren't being sent down with `aps` dict.\n      // TODO: remove applicationIconBadgeNumber on next major version\n      this._badgeCount =\n        nativeNotif.badge || nativeNotif.applicationIconBadgeNumber;\n      // TODO: remove soundName on next major version\n      this._sound = nativeNotif.sound || nativeNotif.soundName;\n      this._alert = nativeNotif.body;\n      this._title = nativeNotif?.title;\n      this._subtitle = nativeNotif?.subtitle;\n      this._threadID = nativeNotif['thread-id'];\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n      this._fireDate = nativeNotif.fireDate;\n    }\n  }\n\n  /**\n   * This method is available for remote notifications that have been received via:\n   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#finish\n   */\n  finish(fetchResult: string) {\n    if (\n      !this._isRemote ||\n      !this._notificationId ||\n      this._remoteNotificationCompleteCallbackCalled\n    ) {\n      return;\n    }\n    this._remoteNotificationCompleteCallbackCalled = true;\n\n    invariant(\n      RNCPushNotificationIOS,\n      'PushNotificationManager is not available.',\n    );\n    RNCPushNotificationIOS.onFinishRemoteNotification(\n      this._notificationId,\n      fetchResult,\n    );\n  }\n\n  /**\n   * An alias for `getAlert` to get the notification's main message string\n   */\n  getMessage(): ?string | ?Object {\n    if (typeof this._alert === 'object') {\n      return this._alert?.body;\n    }\n    return this._alert;\n  }\n\n  /**\n   * Gets the sound string from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getsound\n   */\n  getSound(): ?string {\n    return this._sound;\n  }\n\n  /**\n   * Gets the category string from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getcategory\n   */\n  getCategory(): ?string {\n    return this._category;\n  }\n\n  /**\n   * Gets the notification's main message from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getalert\n   */\n  getAlert(): ?string | ?Object {\n    return this._alert;\n  }\n\n  /**\n   * Gets the notification's title from the `aps` object\n   *\n   */\n  getTitle(): ?string | ?Object {\n    if (typeof this._alert === 'object') {\n      return this._alert?.title;\n    }\n    return this._title;\n  }\n\n  /**\n   * Gets the notification's subtitle from the `aps` object\n   *\n   */\n  getSubtitle(): ?string | ?Object {\n    if (typeof this._alert === 'object') {\n      return this._alert?.subtitle;\n    }\n    return this._subtitle;\n  }\n\n  /**\n   * Gets the content-available number from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getcontentavailable\n   */\n  getContentAvailable(): ContentAvailable {\n    return this._contentAvailable;\n  }\n\n  /**\n   * Gets the badge count number from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getbadgecount\n   */\n  getBadgeCount(): ?number {\n    return this._badgeCount;\n  }\n\n  /**\n   * Gets the data object on the notif\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getdata\n   */\n  getData(): ?Object {\n    return this._data;\n  }\n\n  /**\n   * Gets the thread ID on the notif\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getthreadid\n   */\n  getThreadID(): ?string {\n    return this._threadID;\n  }\n\n  /**\n   * Get's the action id of the notification action user has taken.\n   */\n  getActionIdentifier(): ?string {\n    return this._actionIdentifier;\n  }\n\n  /**\n   * Gets the text user has inputed if user has taken the text action response.\n   */\n  getUserText(): ?string {\n    return this._userText;\n  }\n}\n\nexport default PushNotificationIOS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}